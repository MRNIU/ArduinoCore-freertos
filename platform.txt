
name=FreeRTOS-PortentaH7 (STM32H747)
version=0.0.1(beta)

# Compile variables
# ------------------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={build.compiler_path}
compiler.stm.extra_include="-I{build.source.path}" "-I{build.core.path}/avr" "-I{build.core.path}/stm32" "-I{build.core.path}/stm32/LL" "-I{build.core.path}/stm32/usb" "-I{build.core.path}/stm32/OpenAMP" "-I{build.core.path}/stm32/usb/hid" "-I{build.core.path}/stm32/usb/cdc" "-I{build.system.path}/Drivers/{build.series}_HAL_Driver/Inc" "-I{build.system.path}/Drivers/{build.series}_HAL_Driver/Src" "-I{build.system.path}/{build.series}" "-I{build.system.path}/Middlewares/ST/STM32_USB_Device_Library/Core/Inc" "-I{build.system.path}/Middlewares/ST/STM32_USB_Device_Library/Core/Src" {build.virtio_extra_include}

compiler.c.cmd={build.crossprefix}gcc
compiler.c.flags=-c {compiler.warning_flags} -Os -g -nostdlib "@{compiler.ph.defines}" "@{compiler.ph.cflags}" {compiler.ph.arch.define} -MMD -mcpu={build.mcu} -mfloat-abi={build.float-abi} -mfpu={build.fpu} {compiler.stm.extra_include}
compiler.c.elf.cmd={build.crossprefix}g++
compiler.c.elf.flags=-Wl,--gc-sections {compiler.warning_flags} -Wl,--as-needed
compiler.S.cmd={build.crossprefix}g++
compiler.S.flags=-c -g -x assembler-with-cpp -Os -mcpu={build.mcu} -mfpu={build.fpu} {compiler.stm.extra_include}
compiler.cpp.cmd={build.crossprefix}g++
compiler.cpp.flags=-c {compiler.warning_flags} -g -Os -nostdlib "@{compiler.ph.defines}" "@{compiler.ph.cxxflags}" {compiler.ph.arch.define} -MMD -mcpu={build.mcu} -mfloat-abi={build.float-abi} -mfpu={build.fpu} {compiler.stm.extra_include}
compiler.ar.cmd={build.crossprefix}ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=
compiler.objcopy.eep.flags=
compiler.elf2hex.bin.flags=-O binary
compiler.elf2hex.hex.flags=-O ihex -R .eeprom
compiler.elf2hex.cmd={build.crossprefix}objcopy
compiler.ldflags=
compiler.libraries.ldflags=
compiler.size.cmd={build.crossprefix}size
compiler.define=-DARDUINO=

# this can be overriden in boards.txt
build.extra_flags=
build.extra.startobjects=
build.extra.endobjects=
compiler.ph=
build.info.flags=

# VirtIO RPMsg Serial Flags
build.virtio_flags=-DVIRTIOCON -DHAL_IPCC_MODULE_ENABLED -DNO_ATOMIC_64_SUPPORT -DMETAL_INTERNAL -DMETAL_MAX_DEVICE_REGIONS=2 -DVIRTIO_MASTER_ONLY -DVIRTIO_LOG
build.virtio_extra_include="-I{build.system.path}/Middlewares/OpenAMP" "-I{build.system.path}/Middlewares/OpenAMP/open-amp/lib/include" "-I{build.system.path}/Middlewares/OpenAMP/libmetal/lib/include" "-I{build.system.path}/Middlewares/OpenAMP/virtual_driver"

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags=
runtime.tools.CMSIS_5-5.6.0.path={build.core.path}/CMSIS_5-5.6.0
compiler.arm.cmsis.c.flags="-I{runtime.tools.CMSIS_5-5.6.0.path}/CMSIS/Core/Include/" "-I{build.system.path}/Drivers/CMSIS/Device/ST/{build.series}/Include/" "-I{build.system.path}/Drivers/CMSIS/Device/ST/{build.series}/Source/Templates/gcc/" "-I{runtime.tools.CMSIS_5-5.6.0.path}/CMSIS/DSP/Include"
compiler.arm.cmsis.ldflags="-L{runtime.tools.CMSIS_5-5.6.0.path}/CMSIS/DSP/Lib/GCC/" -l{build.cmsis_lib_gcc}
#runtime.tools.CMSIS_5-5.4.0.path={build.core.path}/CMSIS_5-5.4.0
#compiler.arm.cmsis.c.flags="-I{runtime.tools.CMSIS_5-5.4.0.path}/CMSIS/Core/Include/" "-I{build.system.path}/Drivers/CMSIS/Device/ST/{build.series}/Include/" "-I{build.system.path}/Drivers/CMSIS/Device/ST/{build.series}/Source/Templates/gcc/" "-I{runtime.tools.CMSIS_5-5.4.0.path}/CMSIS/DSP/Include"
#compiler.arm.cmsis.ldflags="-L{runtime.tools.CMSIS_5-5.4.0.path}/CMSIS/DSP/Lib/GCC/" -l{build.cmsis_lib_gcc}

# USB Flags
# ---------
build.usb_flags=

# Default usb manufacturer will be replaced at compile time using
# numeric vendor ID if available or by board's specific value.
#build.usb_manufacturer="Unknown"

build.zip.pattern={recipe.size.pattern}

# Linux compile patterns
# -----------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {build.info.flags} {compiler.arm.cmsis.c.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} {arch}  {build.extra_flags} {compiler.c.extra_flags} "-I{build.core.path}/api/deprecated" {includes} "-iprefix{build.core.path}" "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {build.info.flags} {compiler.arm.cmsis.c.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} {arch} {includes} {build.extra_flags} {compiler.cpp.extra_flags} "-I{build.core.path}/api/deprecated" "-iprefix{build.core.path}" "{source_file}" -o "{object_file}"

## Compile asm files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} {build.info.flags} {compiler.arm.cmsis.c.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} {arch} {includes} {build.extra_flags} {compiler.cpp.extra_flags} "-I{build.core.path}/api/deprecated" "-iprefix{build.core.path}" "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} {build.info.flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}"  "-L{build.path}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} {compiler.arm.cmsis.ldflags} "@{compiler.ph.ldflags}" "-T{build.variant.path}/{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" --specs=nosys.specs {compiler.ldflags} -o "{build.path}/{build.project_name}.elf" {object_files} -Wl,--whole-archive "{build.path}/{archive_file}" {compiler.ph} -Wl,--no-whole-archive -Wl,--start-group {compiler.ph.extra_ldflags} {compiler.libraries.ldflags} -Wl,--end-group

## Create eeprom
recipe.objcopy.eep.pattern=

## Create output (bin file)
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.bin.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create output (hex file)
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex.data=^(?:\.data|\.bss)\s+([0-9]+).*
recipe.size.regex=^(?:\.data|\.text)\s+([0-9]+).*

## Save hex
recipe.output.tmp_file={build.project_name}.bin
recipe.output.save_file={build.project_name}.{build.variant}.bin

# Uploader tools
# ---------------------

tools.openocd.path={runtime.tools.openocd-0.10.0-arduino12.path}
tools.openocd.cmd=bin/openocd
tools.openocd.cmd.windows=bin/openocd.exe

tools.openocd.upload.params.verbose=-d2
tools.openocd.upload.params.quiet=-d0
tools.openocd.upload.pattern="{path}/{cmd}" {upload.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter_khz 10000; program {{build.path}/{build.project_name}.elf}; reset run; shutdown"

tools.openocd.program.params.verbose=-d2
tools.openocd.program.params.quiet=-d0
tools.openocd.program.pattern="{path}/{cmd}" {program.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter_khz 10000; program {{build.path}/{build.project_name}.elf}; reset run; shutdown"

tools.openocd.erase.params.verbose=-d2
tools.openocd.erase.params.quiet=-d0
tools.openocd.erase.pattern=

tools.openocd.bootloader.params.verbose=-d2
tools.openocd.bootloader.params.quiet=-d0
tools.openocd.bootloader.pattern="{path}/{cmd}" {bootloader.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter_khz 10000; {bootloader.extra_action.preflash}; program {{runtime.platform.path}/bootloaders/{bootloader.file}}; reset run; shutdown"

#
# BOSSA
#
tools.bossac.path={runtime.tools.bossac-1.9.1-arduino1.path}
tools.bossac.cmd=bossac
tools.bossac.cmd.windows=bossac.exe

tools.bossac.upload.params.verbose=-d
tools.bossac.upload.params.quiet=
tools.bossac.upload.pattern="{path}/{cmd}" {upload.verbose} --port={serial.port.file} -U -i -e -w "{build.path}/{build.project_name}.bin" -R

# STM32FLASH
tools.stm32flash.cmd=stm32flash
tools.stm32flash.path={runtime.platform.path}/tools/windows
tools.stm32flash.path.macosx={runtime.platform.path}/tools/macosx
tools.stm32flash.path.linux={runtime.platform.path}/tools/linux
tools.stm32flash.upload.params.verbose=-v
tools.stm32flash.upload.params.quiet=
tools.stm32flash.upload.pattern="{path}/{cmd}" {serial.port} -e 1024 -b 2400 -w "{build.path}/{build.project_name}.bin"
tools.stm32flash.program.params.verbose=-v
tools.stm32flash.program.params.quiet=
tools.stm32flash.program.pattern="{path}/{cmd}" {serial.port} -e 1024 -b 2400 -w "{build.path}/{build.project_name}.bin"
tools.stm32flash.erase.params.verbose=-v
tools.stm32flash.erase.params.quiet=
tools.stm32flash.erase.pattern="{path}/{cmd}" {serial.port} -e 1024 -b 2400

#
# DFU_UTIL
#
tools.dfu-util.path={runtime.tools.dfu-util.path}
tools.dfu-util.cmd=dfu-util

tools.dfu-util.upload.params.verbose=-d
tools.dfu-util.upload.params.quiet=
tools.dfu-util.upload.pattern="{path}/{cmd}" --device {upload.vid}:{upload.pid} -D "{build.path}/{build.project_name}.bin" -a{upload.interface} --dfuse-address={upload.address}:leave

#
# GDB (Debugger)
#
# EXPERIMENTAL feature: debug.pattern
#  - this is alpha and may be subject to change without notice

tools.gdb.path={runtime.tools.arm-none-eabi-gcc-7-2017q4.path}/bin/
tools.gdb.cmd=arm-none-eabi-gdb
tools.gdb.cmd.windows=arm-none-eabi-gdb.exe
tools.gdb.debug.pattern="{path}/{cmd}" --interpreter=mi2 -ex "set pagination off" --baud 115200 -ex "set target-charset ASCII" -ex "target remote {debug.port}" {build.path}/{build.project_name}.elf
